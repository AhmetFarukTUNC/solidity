// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

contract functions{

    //This code return value of luckyNumber variable...

    uint luckyNumber = 7;

    function showNumber() public view returns(uint){

        return luckyNumber;

    }

    //This code returns luckyNumber2 variable.

    uint public luckyNumber2 = 7; 

    // This code assigns a value string or number to luckyNumber variable.

    function setNumber(uint newNumber)  public {

        luckyNumber = newNumber;

    }

    function nothing() public pure returns(uint,bool,bool){

        return(0,true,false);

    }

    function nothing2() public pure returns(uint x,bool y,bool z){
        x=6;
        y=true;
        z=false;
    }

    uint public a =3;

    uint public b=4;

    function seta(uint newa) public {
        a=newa;
    }

    function setX(uint x) public view returns(uint){
        return a+x;
    }

    function add(uint x,uint y) public view returns(uint){

       return x + y + block.timestamp;

    }

    //Note : We use view keyword because ıt is required for read value.
    //İf you don't do read everything ypu can pure keyword.

    function add2(uint z,uint t)public pure returns(uint){
        return z + t;
    }

    //Contracts and users can call any function with the public key from anywhere.

    function add3(uint d,uint e) public pure returns(uint){
        return d+e;
    }

    function add4(uint f,uint g) public pure returns(uint){
        return add3(f,g);
    }

    function publicKeyword() public pure returns(string memory){
        return "This is a public function.";
    }
    

    function callPublicKeyword() public pure returns(string memory) {
        return publicKeyword();
    }

    //Private : Only this contract can reach this function but no other contract can.

    function privateKeyword() private pure returns(string memory){
        return "This is a private function.";
    }

    //How can I call private keyword?

    function callPrivateKeyword() public pure returns(string memory){

        return privateKeyword();

    }

    // Internal : Only inherited contracts can be reached.

    function internalKeyword() internal pure returns(string memory){
        return "This is a internal function.";
    }

    //How can I call internal function?

    function callInternalKeyword() public pure returns(string memory){

       return internalKeyword();

    }

    // External : Users call it but contracts can't call.

    function externalKeyword() external pure returns(string memory){
        return "This is a external function.";
    }

    //How can I call internal function?

    function callExternalKeyword() public pure returns(string memory){

        return externalKeyword();

     }

}
